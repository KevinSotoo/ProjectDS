Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from fastapi import FastAPI, HTTPException\r\nfrom models import Progreso, CausaAbandono\r\nfrom operations import (\r\n    guardar_progreso,\r\n    listar_progresos,\r\n    obtener_progreso,\r\n    actualizar_progreso,\r\n    eliminar_progreso,\r\n    guardar_abandono,\r\n    listar_abandonos,\r\n    obtener_abandono,\r\n    actualizar_abandono,\r\n    eliminar_abandono,\r\n    obtener_abandono_por_motivo, listar_progresos_historial, listar_abandonos_historial\r\n)\r\n\r\napp = FastAPI()\r\n@app.get(\"/progreso/eliminados\", response_model=list[Progreso])\r\ndef leer_progresos_eliminados():\r\n    return [p for p in listar_progresos(incluir_inactivos=True) if not p.activo]\r\n\r\n@app.get(\"/progreso/historial\", response_model=list[Progreso])\r\ndef historial_progreso_total():\r\n    return listar_progresos(incluir_inactivos=True)\r\n@app.post(\"/progreso/\", response_model=Progreso)\r\ndef crear_progreso(p: Progreso):\r\n    return guardar_progreso(p)\r\n\r\n@app.get(\"/progreso/\", response_model=list[Progreso])\r\ndef leer_progresos():\r\n    return listar_progresos()\r\n\r\n@app.get(\"/progreso/{nombre}\", response_model=Progreso)\r\ndef leer_progreso(nombre: str):\r\n    for prog in listar_progresos_historial():\r\n        if prog.nombre.lower() == nombre.lower():\r\n            return prog\r\n    raise HTTPException(status_code=404, detail=\"Progreso no encontrado\")\r\n\r\n@app.put(\"/progreso/{nombre}\", response_model=Progreso)\r\ndef actualizar(nombre: str, nuevo: Progreso):\r\n    res = actualizar_progreso(nombre, nuevo)\r\n    if \"error\" in res:\r\n        raise HTTPException(status_code=404, detail=res[\"error\"])\r\n    return res\r\n\r\n@app.delete(\"/progreso/{nombre}\")\r\ndef eliminar(nombre: str):\r\n    res = eliminar_progreso(nombre)\r\n    if \"error\" in res:\r\n        raise HTTPException(status_code=404, detail=res[\"error\"])\r\n    return res\r\n\r\n@app.get(\"/abandono/historial\", response_model=list[CausaAbandono])\r\ndef historial_abandono_total():\r\n    return listar_abandonos(incluir_inactivos=True)\r\n@app.post(\"/abandono/\", response_model=CausaAbandono)\r\ndef crear_abandono(c: CausaAbandono):\r\n    return guardar_abandono(c)\r\n\r\n@app.get(\"/abandono/\", response_model=list[CausaAbandono])\r\ndef leer_abandonos():\r\n    return listar_abandonos()\r\n\r\n@app.get(\"/abandono/motivo/{motivo}\", response_model=list[CausaAbandono])\r\ndef buscar_por_motivo(motivo: str):\r\n    return obtener_abandono_por_motivo(motivo)\r\n\r\n@app.get(\"/abandono/{nombre}\", response_model=CausaAbandono)\r\ndef leer_abandono(nombre: str):\r\n    for causa in listar_abandonos_historial():\r\n        if causa.nombre.lower() == nombre.lower():\r\n            return causa\r\n    raise HTTPException(status_code=404, detail=\"Causa no encontrada\")\r\n\r\n@app.put(\"/abandono/{nombre}\", response_model=CausaAbandono)\r\ndef actualizar_abandono(nombre: str, nueva: CausaAbandono):\r\n    res = actualizar_abandono(nombre, nueva)\r\n    if \"error\" in res:\r\n        raise HTTPException(status_code=404, detail=res[\"error\"])\r\n    return res\r\n\r\n@app.delete(\"/abandono/{nombre}\")\r\ndef eliminar_causa_abandono(nombre: str):\r\n    res = eliminar_abandono(nombre)\r\n    if \"error\" in res:\r\n        raise HTTPException(status_code=404, detail=res[\"error\"])\r\n    return res\r\n\r\n@app.get(\"/abandono/eliminados\", response_model=list[CausaAbandono])\r\ndef leer_abandonos_eliminados():\r\n    return [c for c in listar_abandonos(incluir_inactivos=True) if not c.activo]\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 41fae1d14b618e22edcb55a429abacf9e0fb4e71)
+++ b/main.py	(date 1747070374342)
@@ -1,4 +1,6 @@
-from fastapi import FastAPI, HTTPException
+from fastapi import FastAPI, HTTPException, Depends
+from sqlmodel import Session
+from connection_db import get_session
 from models import Progreso, CausaAbandono
 from operations import (
     guardar_progreso,
@@ -23,8 +25,8 @@
 def historial_progreso_total():
     return listar_progresos(incluir_inactivos=True)
 @app.post("/progreso/", response_model=Progreso)
-def crear_progreso(p: Progreso):
-    return guardar_progreso(p)
+def crear_progreso_endpoint(p: Progreso, db: Session = Depends(get_session)):
+    return guardar_progreso(db, p)
 
 @app.get("/progreso/", response_model=list[Progreso])
 def leer_progresos():
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.env
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 41fae1d14b618e22edcb55a429abacf9e0fb4e71)
+++ b/.gitignore	(date 1747070410849)
@@ -1,1 +1,3 @@
-.env
\ No newline at end of file
+.env
+__pycache__/
+*.pyc
\ No newline at end of file
